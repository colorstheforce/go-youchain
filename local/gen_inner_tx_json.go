// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package local

import (
	"encoding/json"
	"math/big"

	"github.com/youchainhq/go-youchain/common"
	"github.com/youchainhq/go-youchain/common/hexutil"
)

var _ = (*innerTxMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (i InnerTx) MarshalJSON() ([]byte, error) {
	type InnerTx struct {
		ParentHash common.Hash    `json:"parent_hash"`
		From       common.Address `json:"from"`
		To         common.Address `json:"to"`
		Value      *hexutil.Big   `json:"value"`
		GasLimit   hexutil.Uint64 `json:"gas_limit"`
	}
	var enc InnerTx
	enc.ParentHash = i.ParentHash
	enc.From = i.From
	enc.To = i.To
	enc.Value = (*hexutil.Big)(i.Value)
	enc.GasLimit = hexutil.Uint64(i.GasLimit)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (i *InnerTx) UnmarshalJSON(input []byte) error {
	type InnerTx struct {
		ParentHash *common.Hash    `json:"parent_hash"`
		From       *common.Address `json:"from"`
		To         *common.Address `json:"to"`
		Value      *hexutil.Big    `json:"value"`
		GasLimit   *hexutil.Uint64 `json:"gas_limit"`
	}
	var dec InnerTx
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash != nil {
		i.ParentHash = *dec.ParentHash
	}
	if dec.From != nil {
		i.From = *dec.From
	}
	if dec.To != nil {
		i.To = *dec.To
	}
	if dec.Value != nil {
		i.Value = (*big.Int)(dec.Value)
	}
	if dec.GasLimit != nil {
		i.GasLimit = uint64(*dec.GasLimit)
	}
	return nil
}
