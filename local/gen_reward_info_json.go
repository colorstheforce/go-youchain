// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package local

import (
	"encoding/json"
	"math/big"

	"github.com/youchainhq/go-youchain/common"
	"github.com/youchainhq/go-youchain/common/hexutil"
)

var _ = (*rewardInfoMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r RewardInfo) MarshalJSON() ([]byte, error) {
	type RewardInfo struct {
		Validator common.Address `json:"validator"`
		Coinbase  common.Address `json:"coinbase"`
		Reward    *hexutil.Big   `json:"reward"`
	}
	var enc RewardInfo
	enc.Validator = r.Validator
	enc.Coinbase = r.Coinbase
	enc.Reward = (*hexutil.Big)(r.Reward)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *RewardInfo) UnmarshalJSON(input []byte) error {
	type RewardInfo struct {
		Validator *common.Address `json:"validator"`
		Coinbase  *common.Address `json:"coinbase"`
		Reward    *hexutil.Big    `json:"reward"`
	}
	var dec RewardInfo
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Validator != nil {
		r.Validator = *dec.Validator
	}
	if dec.Coinbase != nil {
		r.Coinbase = *dec.Coinbase
	}
	if dec.Reward != nil {
		r.Reward = (*big.Int)(dec.Reward)
	}
	return nil
}
