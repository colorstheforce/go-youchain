// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package core

import (
	"encoding/json"
	"math/big"

	"github.com/youchainhq/go-youchain/common"
	"github.com/youchainhq/go-youchain/common/hexutil"
	"github.com/youchainhq/go-youchain/common/math"
	"github.com/youchainhq/go-youchain/params"
)

var _ = (*genesisValidatorMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (g GenesisValidator) MarshalJSON() ([]byte, error) {
	type GenesisValidator struct {
		Name            string                `json:"name"`
		OperatorAddress common.Address        `json:"operatorAddress"`
		Coinbase        common.Address        `json:"coinbase"`
		MainPubKey      hexutil.Bytes         `json:"mainPubKey"`
		BlsPubKey       hexutil.Bytes         `json:"blsPubKey"`
		Token           *math.HexOrDecimal256 `json:"token"`
		Role            uint8                 `json:"role"`
		Status          uint8                 `json:"status"`
	}
	var enc GenesisValidator
	enc.Name = g.Name
	enc.OperatorAddress = g.OperatorAddress
	enc.Coinbase = g.Coinbase
	enc.MainPubKey = g.MainPubKey
	enc.BlsPubKey = g.BlsPubKey
	enc.Token = (*math.HexOrDecimal256)(g.Token)
	enc.Role = uint8(g.Role)
	enc.Status = g.Status
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *GenesisValidator) UnmarshalJSON(input []byte) error {
	type GenesisValidator struct {
		Name            *string               `json:"name"`
		OperatorAddress *common.Address       `json:"operatorAddress"`
		Coinbase        *common.Address       `json:"coinbase"`
		MainPubKey      *hexutil.Bytes        `json:"mainPubKey"`
		BlsPubKey       *hexutil.Bytes        `json:"blsPubKey"`
		Token           *math.HexOrDecimal256 `json:"token"`
		Role            *uint8                `json:"role"`
		Status          *uint8                `json:"status"`
	}
	var dec GenesisValidator
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Name != nil {
		g.Name = *dec.Name
	}
	if dec.OperatorAddress != nil {
		g.OperatorAddress = *dec.OperatorAddress
	}
	if dec.Coinbase != nil {
		g.Coinbase = *dec.Coinbase
	}
	if dec.MainPubKey != nil {
		g.MainPubKey = *dec.MainPubKey
	}
	if dec.BlsPubKey != nil {
		g.BlsPubKey = *dec.BlsPubKey
	}
	if dec.Token != nil {
		g.Token = (*big.Int)(dec.Token)
	}
	if dec.Role != nil {
		g.Role = params.ValidatorRole(*dec.Role)
	}
	if dec.Status != nil {
		g.Status = *dec.Status
	}
	return nil
}
