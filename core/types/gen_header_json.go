// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/youchainhq/go-youchain/common"
	"github.com/youchainhq/go-youchain/common/hexutil"
	"github.com/youchainhq/go-youchain/params"
)

var _ = (*headerMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (h Header) MarshalJSON() ([]byte, error) {
	type Header struct {
		ParentHash     common.Hash    `json:"parentHash"       gencodec:"required"`
		Coinbase       common.Address `json:"miner"            gencodec:"required"`
		Root           common.Hash    `json:"stateRoot"        gencodec:"required"`
		ValRoot        common.Hash    `json:"valRoot"          gencodec:"required"`
		StakingRoot    common.Hash    `json:"stakingRoot"      gencodec:"required"`
		TxHash         common.Hash    `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash    common.Hash    `json:"receiptsRoot"     gencodec:"required"`
		Bloom          Bloom          `json:"logsBloom"        gencodec:"required"`
		Number         *hexutil.Big   `json:"number"           gencodec:"required"`
		Subsidy        *hexutil.Big   `json:"subsidy"          gencodec:"required"`
		GasRewards     *hexutil.Big   `json:"gasRewards"       gencodec:"required"`
		GasLimit       hexutil.Uint64 `json:"gasLimit"         gencodec:"required"`
		GasUsed        hexutil.Uint64 `json:"gasUsed"          gencodec:"required"`
		Time           hexutil.Uint64 `json:"timestamp"        gencodec:"required"`
		CurrVersion    hexutil.Uint64 `json:"version"          gencodec:"required"`
		NextVersion    hexutil.Uint64 `json:"nextVersion"      gencodec:"required"`
		NextApprovals  hexutil.Uint64 `json:"nextApprovals"    gencodec:"required"`
		NextVoteBefore hexutil.Uint64 `json:"nextVoteBefore"   gencodec:"required"`
		NextSwitchOn   hexutil.Uint64 `json:"nextSwitchOn"     gencodec:"required"`
		MixDigest      common.Hash    `json:"mixHash"          gencodec:"required"`
		Extra          hexutil.Bytes  `json:"extraData"        gencodec:"required"`
		SlashData      hexutil.Bytes  `json:"slashData"        gencodec:"required"`
		Consensus      hexutil.Bytes  `json:"consensus"        gencodec:"required"`
		ChtRoot        hexutil.Bytes  `json:"chtRoot"          gencodec:"required"`
		BltRoot        hexutil.Bytes  `json:"bltRoot"          gencodec:"required"`
		Validator      hexutil.Bytes  `json:"validator"        gencodec:"required"`
		Signature      hexutil.Bytes  `json:"signature"        gencodec:"required"`
		Certificate    hexutil.Bytes  `json:"certificate"        gencodec:"required"`
		Hash           common.Hash    `json:"hash"`
	}
	var enc Header
	enc.ParentHash = h.ParentHash
	enc.Coinbase = h.Coinbase
	enc.Root = h.Root
	enc.ValRoot = h.ValRoot
	enc.StakingRoot = h.StakingRoot
	enc.TxHash = h.TxHash
	enc.ReceiptHash = h.ReceiptHash
	enc.Bloom = h.Bloom
	enc.Number = (*hexutil.Big)(h.Number)
	enc.Subsidy = (*hexutil.Big)(h.Subsidy)
	enc.GasRewards = (*hexutil.Big)(h.GasRewards)
	enc.GasLimit = hexutil.Uint64(h.GasLimit)
	enc.GasUsed = hexutil.Uint64(h.GasUsed)
	enc.Time = hexutil.Uint64(h.Time)
	enc.CurrVersion = hexutil.Uint64(h.CurrVersion)
	enc.NextVersion = hexutil.Uint64(h.NextVersion)
	enc.NextApprovals = hexutil.Uint64(h.NextApprovals)
	enc.NextVoteBefore = hexutil.Uint64(h.NextVoteBefore)
	enc.NextSwitchOn = hexutil.Uint64(h.NextSwitchOn)
	enc.MixDigest = h.MixDigest
	enc.Extra = h.Extra
	enc.SlashData = h.SlashData
	enc.Consensus = h.Consensus
	enc.ChtRoot = h.ChtRoot
	enc.BltRoot = h.BltRoot
	enc.Validator = h.Validator
	enc.Signature = h.Signature
	enc.Certificate = h.Certificate
	enc.Hash = h.Hash()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (h *Header) UnmarshalJSON(input []byte) error {
	type Header struct {
		ParentHash     *common.Hash    `json:"parentHash"       gencodec:"required"`
		Coinbase       *common.Address `json:"miner"            gencodec:"required"`
		Root           *common.Hash    `json:"stateRoot"        gencodec:"required"`
		ValRoot        *common.Hash    `json:"valRoot"          gencodec:"required"`
		StakingRoot    *common.Hash    `json:"stakingRoot"      gencodec:"required"`
		TxHash         *common.Hash    `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash    *common.Hash    `json:"receiptsRoot"     gencodec:"required"`
		Bloom          *Bloom          `json:"logsBloom"        gencodec:"required"`
		Number         *hexutil.Big    `json:"number"           gencodec:"required"`
		Subsidy        *hexutil.Big    `json:"subsidy"          gencodec:"required"`
		GasRewards     *hexutil.Big    `json:"gasRewards"       gencodec:"required"`
		GasLimit       *hexutil.Uint64 `json:"gasLimit"         gencodec:"required"`
		GasUsed        *hexutil.Uint64 `json:"gasUsed"          gencodec:"required"`
		Time           *hexutil.Uint64 `json:"timestamp"        gencodec:"required"`
		CurrVersion    *hexutil.Uint64 `json:"version"          gencodec:"required"`
		NextVersion    *hexutil.Uint64 `json:"nextVersion"      gencodec:"required"`
		NextApprovals  *hexutil.Uint64 `json:"nextApprovals"    gencodec:"required"`
		NextVoteBefore *hexutil.Uint64 `json:"nextVoteBefore"   gencodec:"required"`
		NextSwitchOn   *hexutil.Uint64 `json:"nextSwitchOn"     gencodec:"required"`
		MixDigest      *common.Hash    `json:"mixHash"          gencodec:"required"`
		Extra          *hexutil.Bytes  `json:"extraData"        gencodec:"required"`
		SlashData      *hexutil.Bytes  `json:"slashData"        gencodec:"required"`
		Consensus      *hexutil.Bytes  `json:"consensus"        gencodec:"required"`
		ChtRoot        *hexutil.Bytes  `json:"chtRoot"          gencodec:"required"`
		BltRoot        *hexutil.Bytes  `json:"bltRoot"          gencodec:"required"`
		Validator      *hexutil.Bytes  `json:"validator"        gencodec:"required"`
		Signature      *hexutil.Bytes  `json:"signature"        gencodec:"required"`
		Certificate    *hexutil.Bytes  `json:"certificate"        gencodec:"required"`
	}
	var dec Header
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for Header")
	}
	h.ParentHash = *dec.ParentHash
	if dec.Coinbase == nil {
		return errors.New("missing required field 'miner' for Header")
	}
	h.Coinbase = *dec.Coinbase
	if dec.Root == nil {
		return errors.New("missing required field 'stateRoot' for Header")
	}
	h.Root = *dec.Root
	if dec.ValRoot == nil {
		return errors.New("missing required field 'valRoot' for Header")
	}
	h.ValRoot = *dec.ValRoot
	if dec.StakingRoot == nil {
		return errors.New("missing required field 'stakingRoot' for Header")
	}
	h.StakingRoot = *dec.StakingRoot
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionsRoot' for Header")
	}
	h.TxHash = *dec.TxHash
	if dec.ReceiptHash == nil {
		return errors.New("missing required field 'receiptsRoot' for Header")
	}
	h.ReceiptHash = *dec.ReceiptHash
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for Header")
	}
	h.Bloom = *dec.Bloom
	if dec.Number == nil {
		return errors.New("missing required field 'number' for Header")
	}
	h.Number = (*big.Int)(dec.Number)
	if dec.Subsidy == nil {
		return errors.New("missing required field 'subsidy' for Header")
	}
	h.Subsidy = (*big.Int)(dec.Subsidy)
	if dec.GasRewards == nil {
		return errors.New("missing required field 'gasRewards' for Header")
	}
	h.GasRewards = (*big.Int)(dec.GasRewards)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for Header")
	}
	h.GasLimit = uint64(*dec.GasLimit)
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for Header")
	}
	h.GasUsed = uint64(*dec.GasUsed)
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for Header")
	}
	h.Time = uint64(*dec.Time)
	if dec.CurrVersion == nil {
		return errors.New("missing required field 'version' for Header")
	}
	h.CurrVersion = params.YouVersion(*dec.CurrVersion)
	if dec.NextVersion == nil {
		return errors.New("missing required field 'nextVersion' for Header")
	}
	h.NextVersion = params.YouVersion(*dec.NextVersion)
	if dec.NextApprovals == nil {
		return errors.New("missing required field 'nextApprovals' for Header")
	}
	h.NextApprovals = uint64(*dec.NextApprovals)
	if dec.NextVoteBefore == nil {
		return errors.New("missing required field 'nextVoteBefore' for Header")
	}
	h.NextVoteBefore = uint64(*dec.NextVoteBefore)
	if dec.NextSwitchOn == nil {
		return errors.New("missing required field 'nextSwitchOn' for Header")
	}
	h.NextSwitchOn = uint64(*dec.NextSwitchOn)
	if dec.MixDigest == nil {
		return errors.New("missing required field 'mixHash' for Header")
	}
	h.MixDigest = *dec.MixDigest
	if dec.Extra == nil {
		return errors.New("missing required field 'extraData' for Header")
	}
	h.Extra = *dec.Extra
	if dec.SlashData == nil {
		return errors.New("missing required field 'slashData' for Header")
	}
	h.SlashData = *dec.SlashData
	if dec.Consensus == nil {
		return errors.New("missing required field 'consensus' for Header")
	}
	h.Consensus = *dec.Consensus
	if dec.ChtRoot == nil {
		return errors.New("missing required field 'chtRoot' for Header")
	}
	h.ChtRoot = *dec.ChtRoot
	if dec.BltRoot == nil {
		return errors.New("missing required field 'bltRoot' for Header")
	}
	h.BltRoot = *dec.BltRoot
	if dec.Validator == nil {
		return errors.New("missing required field 'validator' for Header")
	}
	h.Validator = *dec.Validator
	if dec.Signature == nil {
		return errors.New("missing required field 'signature' for Header")
	}
	h.Signature = *dec.Signature
	if dec.Certificate == nil {
		return errors.New("missing required field 'certificate' for Header")
	}
	h.Certificate = *dec.Certificate
	return nil
}
