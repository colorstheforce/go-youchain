// Copyright 2020 YOUCHAIN FOUNDATION LTD.
// Copyright 2016 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package core

import (
	"fmt"
	"github.com/youchainhq/go-youchain/common"
	"github.com/youchainhq/go-youchain/common/hexutil"
	"github.com/youchainhq/go-youchain/core/types"
	"github.com/youchainhq/go-youchain/rlp"
	"testing"
)

func TestCalcGasLimit(t *testing.T) {
	//params.GasLimitBoundDivisor = 1024
	parent := types.NewBlock(&types.Header{
		GasLimit: 1024 * 10,
		GasUsed:  1024 * 8,
	}, nil, nil)

	gasLimitForNextBlock := CalcGasLimit(parent)
	fmt.Println("parent gas limit", parent.GasLimit())
	fmt.Println("parent gas used", parent.GasUsed())
	fmt.Println("next gas limit", gasLimitForNextBlock)
}

func TestReceiptsBloom(t *testing.T) {
	remote := `0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000002000000000040000000000000000000000000000000100000000000000040000000000000000000000000000000000000000000000000000100000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000040000000000000000000000000000000000000000000000000000000000000000000`
	local := `0x`
	input := `0xf90109f901068080bc0`
	data := common.FromHex(input)
	var receipts types.Receipts
	_ = rlp.DecodeBytes(data, &receipts)
	fmt.Println("receipts", receipts.Len())
	rbloom := types.CreateBloom(receipts)
	get := hexutil.Encode(rbloom.Bytes())

	fmt.Println("remote", remote)
	fmt.Println("local ", local)
	fmt.Println("get   ", get)
	fmt.Println("remote == get", remote == get)
	fmt.Println("local == get", local == get)

	for i, re := range receipts {
		fmt.Println("i", i, "hash", re.BlockHash.String(), "contractAddr", re.ContractAddress.String(), "txhash", re.TxHash.String(), "logs", len(re.Logs))
		for j, l := range re.Logs {
			fmt.Println("j", j, "addr", l.Address.String(), "tx", l.TxHash.String(), "num", l.BlockNumber, "idx", l.Index, "hash", l.BlockHash.String(), "topics", len(l.Topics), "data", l.Data)
			for m, t := range l.Topics {
				fmt.Println("------- topic  ", m, "--", t.String())
			}
		}
	}
}

//invalid bloom (
// remote
// local: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// receipts: 1
// 0xf90109f901068080bc0
// )"
