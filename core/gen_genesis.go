// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package core

import (
	"encoding/json"
	"errors"

	"github.com/youchainhq/go-youchain/common"
	"github.com/youchainhq/go-youchain/common/hexutil"
	"github.com/youchainhq/go-youchain/common/math"
	"github.com/youchainhq/go-youchain/params"
)

var _ = (*genesisSpecMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (g Genesis) MarshalJSON() ([]byte, error) {
	type Genesis struct {
		NetworkId   uint64                                      `json:"networkId"`
		Timestamp   math.HexOrDecimal64                         `json:"timestamp"`
		GasLimit    math.HexOrDecimal64                         `json:"gasLimit"   gencodec:"required"`
		ExtraData   hexutil.Bytes                               `json:"extraData"`
		Consensus   hexutil.Bytes                               `json:"consensus"`
		Mixhash     common.Hash                                 `json:"mixHash"`
		Coinbase    common.Address                              `json:"coinbase"`
		Alloc       map[common.UnprefixedAddress]GenesisAccount `json:"alloc"      gencodec:"required"`
		Validators  GenesisValidators                           `json:"validators"`
		CurrVersion params.YouVersion                           `json:"version"    gencodec:"required"`
		Number      math.HexOrDecimal64                         `json:"number"`
		GasUsed     math.HexOrDecimal64                         `json:"gasUsed"`
		ParentHash  common.Hash                                 `json:"parentHash"`
	}
	var enc Genesis
	enc.NetworkId = g.NetworkId
	enc.Timestamp = math.HexOrDecimal64(g.Timestamp)
	enc.GasLimit = math.HexOrDecimal64(g.GasLimit)
	enc.ExtraData = g.ExtraData
	enc.Consensus = g.Consensus
	enc.Mixhash = g.Mixhash
	enc.Coinbase = g.Coinbase
	if g.Alloc != nil {
		enc.Alloc = make(map[common.UnprefixedAddress]GenesisAccount, len(g.Alloc))
		for k, v := range g.Alloc {
			enc.Alloc[common.UnprefixedAddress(k)] = v
		}
	}
	enc.Validators = g.Validators
	enc.CurrVersion = g.CurrVersion
	enc.Number = math.HexOrDecimal64(g.Number)
	enc.GasUsed = math.HexOrDecimal64(g.GasUsed)
	enc.ParentHash = g.ParentHash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *Genesis) UnmarshalJSON(input []byte) error {
	type Genesis struct {
		NetworkId   *uint64                                     `json:"networkId"`
		Timestamp   *math.HexOrDecimal64                        `json:"timestamp"`
		GasLimit    *math.HexOrDecimal64                        `json:"gasLimit"   gencodec:"required"`
		ExtraData   *hexutil.Bytes                              `json:"extraData"`
		Consensus   *hexutil.Bytes                              `json:"consensus"`
		Mixhash     *common.Hash                                `json:"mixHash"`
		Coinbase    *common.Address                             `json:"coinbase"`
		Alloc       map[common.UnprefixedAddress]GenesisAccount `json:"alloc"      gencodec:"required"`
		Validators  *GenesisValidators                          `json:"validators"`
		CurrVersion *params.YouVersion                          `json:"version"    gencodec:"required"`
		Number      *math.HexOrDecimal64                        `json:"number"`
		GasUsed     *math.HexOrDecimal64                        `json:"gasUsed"`
		ParentHash  *common.Hash                                `json:"parentHash"`
	}
	var dec Genesis
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.NetworkId != nil {
		g.NetworkId = *dec.NetworkId
	}
	if dec.Timestamp != nil {
		g.Timestamp = uint64(*dec.Timestamp)
	}
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for Genesis")
	}
	g.GasLimit = uint64(*dec.GasLimit)
	if dec.ExtraData != nil {
		g.ExtraData = *dec.ExtraData
	}
	if dec.Consensus != nil {
		g.Consensus = *dec.Consensus
	}
	if dec.Mixhash != nil {
		g.Mixhash = *dec.Mixhash
	}
	if dec.Coinbase != nil {
		g.Coinbase = *dec.Coinbase
	}
	if dec.Alloc == nil {
		return errors.New("missing required field 'alloc' for Genesis")
	}
	g.Alloc = make(GenesisAlloc, len(dec.Alloc))
	for k, v := range dec.Alloc {
		g.Alloc[common.Address(k)] = v
	}
	if dec.Validators != nil {
		g.Validators = *dec.Validators
	}
	if dec.CurrVersion == nil {
		return errors.New("missing required field 'version' for Genesis")
	}
	g.CurrVersion = *dec.CurrVersion
	if dec.Number != nil {
		g.Number = uint64(*dec.Number)
	}
	if dec.GasUsed != nil {
		g.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.ParentHash != nil {
		g.ParentHash = *dec.ParentHash
	}
	return nil
}
