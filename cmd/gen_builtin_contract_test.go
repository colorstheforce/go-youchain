// Copyright 2020 YOUCHAIN FOUNDATION LTD.
// This file is part of the go-youchain library.
//
// The go-youchain library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-youchain library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-youchain library. If not, see <http://www.gnu.org/licenses/>.

package cmd

import (
	"bytes"
	"fmt"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/youchainhq/go-youchain/common"
	"github.com/youchainhq/go-youchain/core"
	"github.com/youchainhq/go-youchain/core/state"
	"github.com/youchainhq/go-youchain/core/vm"
	"github.com/youchainhq/go-youchain/core/vm/runtime"
	"github.com/youchainhq/go-youchain/crypto"
	"github.com/youchainhq/go-youchain/params"
	"github.com/youchainhq/go-youchain/youdb"
	"math/big"
	"testing"
	"time"
)

func TestGenBuiltinLockPositionContract(t *testing.T) {
	t.Skip("run on need")
	acc1Key, _ := crypto.HexToECDSA("372f86826d3a107bd342aa8713081514e97d7dcc8c6f4168a4f8bc6a6c6fa358")
	acc1Addr := crypto.PubkeyToAddress(acc1Key.PublicKey) //0x59677fD68ec54e43aD4319D915f81748B5a6Ff8B
	// the contract deployment bin
	bin := deployBin()
	// init evm config
	params.InitNetworkId(params.MainNetId)
	yp, ok := params.Versions[params.YouCurrentVersion]
	require.True(t, ok)
	vmcfg := core.CombineVMConfig(&yp, vm.LocalConfig{})
	// set statedb for later dump
	db := youdb.NewMemDatabase()
	st, err := state.New(common.Hash{}, common.Hash{}, common.Hash{}, state.NewDatabase(db))
	require.NoError(t, err)
	rcfg := &runtime.Config{
		Origin:      acc1Addr,
		Coinbase:    acc1Addr,
		BlockNumber: new(big.Int),
		Time:        new(big.Int).SetInt64(time.Now().Unix()),
		GasLimit:    1000000,
		GasPrice:    new(big.Int), // don't need gasPrice
		Value:       new(big.Int),
		Debug:       false,
		EVMConfig:   vmcfg,
		State:       st,
	}

	code, contractAddr, _, err := runtime.Create(bin, rcfg)
	require.NoError(t, err, "Create")

	allocBalance, ok := new(big.Int).SetString("0x18d7ce50c001d7196740000", 0)
	require.True(t, ok)
	st.SetBalance(contractAddr, allocBalance)

	// commit and dump state db, to get the contract storage
	_, _, _, err = st.Commit(true)
	assert.NoError(t, err)
	fmt.Println("State Dump\n", string(st.Dump()))

	chash := st.GetCodeHash(contractAddr)
	//actually use the code hash to derive the address
	newContractAddr := common.BytesToAddress(chash[12:])
	fmt.Println("newContractAddress: ", newContractAddr.String())

	// check the deployed code and the runtime-bin by the compiler
	ok = bytes.Equal(code, runtimeBin())
	require.True(t, ok, "deployedCode should equal to the runtime-bin")

	angelAmount := st.GetState(contractAddr, common.BytesToHash([]byte{0x1}))
	teamAmount := st.GetState(contractAddr, common.BytesToHash([]byte{0x5}))
	t.Logf("angelAmount: %s\nteamAmount: %s\n", angelAmount.Big().String(), teamAmount.Big().String())
}

func deployBin() []byte {
	return common.Hex2Bytes("608060405234801561001057600080fd5b5060408051608080820183527375f4b0b9745e5362a7222403d57ba08d6a0a06b88083526aa5e096a1cff9897e74000060208085018290526000858701819052602f606096870181905281546001600160a01b0319908116909517825560019390935560028190556003805460ff19908116909417905586519485018752734b7f294d99f9e67b1686e0aa41c0ed4a906853208086526ae79c4e6a3023e81800000092860183905296850181905260239490950184905260048054909316909517909155600593909355600691909155600780549092161790556104af806100f96000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637ff3366f1161005b5780637ff3366f146100f45780638a2132b41461011857806393b8048114610120578063e4dd91d71461012857610088565b806310422c241461008d57806330bfd039146100975780633aec9dd4146100d257806368ba745c146100ec575b600080fd5b610095610130565b005b61009f61019b565b604080516001600160a01b03909516855260208501939093528383019190915260ff166060830152519081900360800190f35b6100da6101b9565b60408051918252519081900360200190f35b6100956101c0565b6100fc610228565b604080516001600160a01b039092168252519081900360200190f35b6100da610240565b6100fc610248565b61009f610260565b337375f4b0b9745e5362a7222403d57ba08d6a0a06b81461018f576040805162461bcd60e51b81526020600482015260146024820152737265717569726520416e67656c4164647265737360601b604482015290519081900360640190fd5b610199600061027e565b565b6004546005546006546007546001600160a01b039093169260ff1684565b62278d0081565b33734b7f294d99f9e67b1686e0aa41c0ed4a906853201461021e576040805162461bcd60e51b815260206004820152601360248201527272657175697265205465616d4164647265737360681b604482015290519081900360640190fd5b610199600461027e565b734b7f294d99f9e67b1686e0aa41c0ed4a9068532081565b635ec1c10081565b7375f4b0b9745e5362a7222403d57ba08d6a0a06b881565b6000546001546002546003546001600160a01b039093169260ff1684565b6040805160808101825282546001600160a01b0316815260018301546020820152600283015491810191909152600382015460ff1660608201526000906102c690429061036e565b9050600081116102d557600080fd5b60028201546102ea908263ffffffff61041916565b600283015581546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610328573d6000803e3d6000fd5b5081546040805183815290516001600160a01b03909216917f5deda1fd3b3d0e60388c37fbcfa1bf4932ca52e3bdbfc29bd8a10af3b8670cfe9181900360200190a25050565b600081604001518260200151141561038857506000610413565b60006103a8836060015160ff16846020015161042f90919063ffffffff16565b905060006103e36103d662278d006103ca88635ec1c10063ffffffff61044416565b9063ffffffff61042f16565b839063ffffffff61045616565b905083602001518111156103f8575060208301515b604084015161040e90829063ffffffff61044416565b925050505b92915050565b60008282018381101561042857fe5b9392505050565b60008082848161043b57fe5b04949350505050565b60008282111561045057fe5b50900390565b60008261046557506000610413565b8282028284828161047257fe5b041461042857fefea265627a7a723158209bd07b87f3bfc359f99f9d183a3c90d74c20d12cdeda497f0183cc9f579bc1d864736f6c63430005100032")
}

func runtimeBin() []byte {
	return common.Hex2Bytes("608060405234801561001057600080fd5b50600436106100885760003560e01c80637ff3366f1161005b5780637ff3366f146100f45780638a2132b41461011857806393b8048114610120578063e4dd91d71461012857610088565b806310422c241461008d57806330bfd039146100975780633aec9dd4146100d257806368ba745c146100ec575b600080fd5b610095610130565b005b61009f61019b565b604080516001600160a01b03909516855260208501939093528383019190915260ff166060830152519081900360800190f35b6100da6101b9565b60408051918252519081900360200190f35b6100956101c0565b6100fc610228565b604080516001600160a01b039092168252519081900360200190f35b6100da610240565b6100fc610248565b61009f610260565b337375f4b0b9745e5362a7222403d57ba08d6a0a06b81461018f576040805162461bcd60e51b81526020600482015260146024820152737265717569726520416e67656c4164647265737360601b604482015290519081900360640190fd5b610199600061027e565b565b6004546005546006546007546001600160a01b039093169260ff1684565b62278d0081565b33734b7f294d99f9e67b1686e0aa41c0ed4a906853201461021e576040805162461bcd60e51b815260206004820152601360248201527272657175697265205465616d4164647265737360681b604482015290519081900360640190fd5b610199600461027e565b734b7f294d99f9e67b1686e0aa41c0ed4a9068532081565b635ec1c10081565b7375f4b0b9745e5362a7222403d57ba08d6a0a06b881565b6000546001546002546003546001600160a01b039093169260ff1684565b6040805160808101825282546001600160a01b0316815260018301546020820152600283015491810191909152600382015460ff1660608201526000906102c690429061036e565b9050600081116102d557600080fd5b60028201546102ea908263ffffffff61041916565b600283015581546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610328573d6000803e3d6000fd5b5081546040805183815290516001600160a01b03909216917f5deda1fd3b3d0e60388c37fbcfa1bf4932ca52e3bdbfc29bd8a10af3b8670cfe9181900360200190a25050565b600081604001518260200151141561038857506000610413565b60006103a8836060015160ff16846020015161042f90919063ffffffff16565b905060006103e36103d662278d006103ca88635ec1c10063ffffffff61044416565b9063ffffffff61042f16565b839063ffffffff61045616565b905083602001518111156103f8575060208301515b604084015161040e90829063ffffffff61044416565b925050505b92915050565b60008282018381101561042857fe5b9392505050565b60008082848161043b57fe5b04949350505050565b60008282111561045057fe5b50900390565b60008261046557506000610413565b8282028284828161047257fe5b041461042857fefea265627a7a723158209bd07b87f3bfc359f99f9d183a3c90d74c20d12cdeda497f0183cc9f579bc1d864736f6c63430005100032")
}
